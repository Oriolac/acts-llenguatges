Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sentence
Rule 1     sentence -> expr ;
Rule 2     sentence -> empty ;
Rule 3     expr -> ( expr )
Rule 4     expr -> expr SUMA expr
Rule 5     expr -> expr RESTA expr
Rule 6     expr -> expr MULT expr
Rule 7     expr -> expr DIV expr
Rule 8     expr -> expr MOD expr
Rule 9     expr -> INTEGER
Rule 10    empty -> <empty>

Terminals, with rules where they appear

(                    : 3
)                    : 3
;                    : 1 2
DIV                  : 7
INTEGER              : 9
MOD                  : 8
MULT                 : 6
RESTA                : 5
SUMA                 : 4
error                : 

Nonterminals, with rules where they appear

empty                : 2
expr                 : 1 3 4 4 5 5 6 6 7 7 8 8
sentence             : 0

Parsing method: LALR

state 0

    (0) S' -> . sentence
    (1) sentence -> . expr ;
    (2) sentence -> . empty ;
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER
    (10) empty -> .

    (               shift and go to state 4
    INTEGER         shift and go to state 5
    ;               reduce using rule 10 (empty -> .)

    sentence                       shift and go to state 1
    expr                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> sentence .



state 2

    (1) sentence -> expr . ;
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               shift and go to state 6
    SUMA            shift and go to state 7
    RESTA           shift and go to state 8
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11


state 3

    (2) sentence -> empty . ;

    ;               shift and go to state 12


state 4

    (3) expr -> ( . expr )
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 13

state 5

    (9) expr -> INTEGER .

    ;               reduce using rule 9 (expr -> INTEGER .)
    SUMA            reduce using rule 9 (expr -> INTEGER .)
    RESTA           reduce using rule 9 (expr -> INTEGER .)
    MULT            reduce using rule 9 (expr -> INTEGER .)
    DIV             reduce using rule 9 (expr -> INTEGER .)
    MOD             reduce using rule 9 (expr -> INTEGER .)
    )               reduce using rule 9 (expr -> INTEGER .)


state 6

    (1) sentence -> expr ; .

    $end            reduce using rule 1 (sentence -> expr ; .)


state 7

    (4) expr -> expr SUMA . expr
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 14

state 8

    (5) expr -> expr RESTA . expr
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 15

state 9

    (6) expr -> expr MULT . expr
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 16

state 10

    (7) expr -> expr DIV . expr
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 17

state 11

    (8) expr -> expr MOD . expr
    (3) expr -> . ( expr )
    (4) expr -> . expr SUMA expr
    (5) expr -> . expr RESTA expr
    (6) expr -> . expr MULT expr
    (7) expr -> . expr DIV expr
    (8) expr -> . expr MOD expr
    (9) expr -> . INTEGER

    (               shift and go to state 4
    INTEGER         shift and go to state 5

    expr                           shift and go to state 18

state 12

    (2) sentence -> empty ; .

    $end            reduce using rule 2 (sentence -> empty ; .)


state 13

    (3) expr -> ( expr . )
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    )               shift and go to state 19
    SUMA            shift and go to state 7
    RESTA           shift and go to state 8
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11


state 14

    (4) expr -> expr SUMA expr .
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               reduce using rule 4 (expr -> expr SUMA expr .)
    SUMA            reduce using rule 4 (expr -> expr SUMA expr .)
    RESTA           reduce using rule 4 (expr -> expr SUMA expr .)
    )               reduce using rule 4 (expr -> expr SUMA expr .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11

  ! MULT            [ reduce using rule 4 (expr -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 4 (expr -> expr SUMA expr .) ]
  ! MOD             [ reduce using rule 4 (expr -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 7 ]
  ! RESTA           [ shift and go to state 8 ]


state 15

    (5) expr -> expr RESTA expr .
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               reduce using rule 5 (expr -> expr RESTA expr .)
    SUMA            reduce using rule 5 (expr -> expr RESTA expr .)
    RESTA           reduce using rule 5 (expr -> expr RESTA expr .)
    )               reduce using rule 5 (expr -> expr RESTA expr .)
    MULT            shift and go to state 9
    DIV             shift and go to state 10
    MOD             shift and go to state 11

  ! MULT            [ reduce using rule 5 (expr -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 5 (expr -> expr RESTA expr .) ]
  ! MOD             [ reduce using rule 5 (expr -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 7 ]
  ! RESTA           [ shift and go to state 8 ]


state 16

    (6) expr -> expr MULT expr .
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               reduce using rule 6 (expr -> expr MULT expr .)
    SUMA            reduce using rule 6 (expr -> expr MULT expr .)
    RESTA           reduce using rule 6 (expr -> expr MULT expr .)
    MULT            reduce using rule 6 (expr -> expr MULT expr .)
    DIV             reduce using rule 6 (expr -> expr MULT expr .)
    MOD             reduce using rule 6 (expr -> expr MULT expr .)
    )               reduce using rule 6 (expr -> expr MULT expr .)

  ! SUMA            [ shift and go to state 7 ]
  ! RESTA           [ shift and go to state 8 ]
  ! MULT            [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]


state 17

    (7) expr -> expr DIV expr .
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               reduce using rule 7 (expr -> expr DIV expr .)
    SUMA            reduce using rule 7 (expr -> expr DIV expr .)
    RESTA           reduce using rule 7 (expr -> expr DIV expr .)
    MULT            reduce using rule 7 (expr -> expr DIV expr .)
    DIV             reduce using rule 7 (expr -> expr DIV expr .)
    MOD             reduce using rule 7 (expr -> expr DIV expr .)
    )               reduce using rule 7 (expr -> expr DIV expr .)

  ! SUMA            [ shift and go to state 7 ]
  ! RESTA           [ shift and go to state 8 ]
  ! MULT            [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]


state 18

    (8) expr -> expr MOD expr .
    (4) expr -> expr . SUMA expr
    (5) expr -> expr . RESTA expr
    (6) expr -> expr . MULT expr
    (7) expr -> expr . DIV expr
    (8) expr -> expr . MOD expr

    ;               reduce using rule 8 (expr -> expr MOD expr .)
    SUMA            reduce using rule 8 (expr -> expr MOD expr .)
    RESTA           reduce using rule 8 (expr -> expr MOD expr .)
    MULT            reduce using rule 8 (expr -> expr MOD expr .)
    DIV             reduce using rule 8 (expr -> expr MOD expr .)
    MOD             reduce using rule 8 (expr -> expr MOD expr .)
    )               reduce using rule 8 (expr -> expr MOD expr .)

  ! SUMA            [ shift and go to state 7 ]
  ! RESTA           [ shift and go to state 8 ]
  ! MULT            [ shift and go to state 9 ]
  ! DIV             [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 11 ]


state 19

    (3) expr -> ( expr ) .

    ;               reduce using rule 3 (expr -> ( expr ) .)
    SUMA            reduce using rule 3 (expr -> ( expr ) .)
    RESTA           reduce using rule 3 (expr -> ( expr ) .)
    MULT            reduce using rule 3 (expr -> ( expr ) .)
    DIV             reduce using rule 3 (expr -> ( expr ) .)
    MOD             reduce using rule 3 (expr -> ( expr ) .)
    )               reduce using rule 3 (expr -> ( expr ) .)

