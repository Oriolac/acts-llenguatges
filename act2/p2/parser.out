Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calculadora
Rule 1     calculadora -> calculadora sentence
Rule 2     calculadora -> empty
Rule 3     sentence -> expr ;
Rule 4     sentence -> empty ;
Rule 5     expr -> ( expr )
Rule 6     expr -> expr SUMA expr
Rule 7     expr -> expr RESTA expr
Rule 8     expr -> expr MULT expr
Rule 9     expr -> expr DIV expr
Rule 10    expr -> expr MOD expr
Rule 11    expr -> INTEGER
Rule 12    empty -> <empty>

Terminals, with rules where they appear

(                    : 5
)                    : 5
;                    : 3 4
DIV                  : 9
INTEGER              : 11
MOD                  : 10
MULT                 : 8
RESTA                : 7
SUMA                 : 6
error                : 

Nonterminals, with rules where they appear

calculadora          : 1 0
empty                : 2 4
expr                 : 3 5 6 6 7 7 8 8 9 9 10 10
sentence             : 1

Parsing method: LALR

state 0

    (0) S' -> . calculadora
    (1) calculadora -> . calculadora sentence
    (2) calculadora -> . empty
    (12) empty -> .

    (               reduce using rule 12 (empty -> .)
    INTEGER         reduce using rule 12 (empty -> .)
    $end            reduce using rule 12 (empty -> .)
    ;               reduce using rule 12 (empty -> .)

    calculadora                    shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> calculadora .
    (1) calculadora -> calculadora . sentence
    (3) sentence -> . expr ;
    (4) sentence -> . empty ;
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER
    (12) empty -> .

    (               shift and go to state 6
    INTEGER         shift and go to state 7
    ;               reduce using rule 12 (empty -> .)

    sentence                       shift and go to state 3
    expr                           shift and go to state 4
    empty                          shift and go to state 5

state 2

    (2) calculadora -> empty .

    (               reduce using rule 2 (calculadora -> empty .)
    INTEGER         reduce using rule 2 (calculadora -> empty .)
    $end            reduce using rule 2 (calculadora -> empty .)
    ;               reduce using rule 2 (calculadora -> empty .)


state 3

    (1) calculadora -> calculadora sentence .

    (               reduce using rule 1 (calculadora -> calculadora sentence .)
    INTEGER         reduce using rule 1 (calculadora -> calculadora sentence .)
    $end            reduce using rule 1 (calculadora -> calculadora sentence .)
    ;               reduce using rule 1 (calculadora -> calculadora sentence .)


state 4

    (3) sentence -> expr . ;
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               shift and go to state 8
    SUMA            shift and go to state 9
    RESTA           shift and go to state 10
    MULT            shift and go to state 11
    DIV             shift and go to state 12
    MOD             shift and go to state 13


state 5

    (4) sentence -> empty . ;

    ;               shift and go to state 14


state 6

    (5) expr -> ( . expr )
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 15

state 7

    (11) expr -> INTEGER .

    ;               reduce using rule 11 (expr -> INTEGER .)
    SUMA            reduce using rule 11 (expr -> INTEGER .)
    RESTA           reduce using rule 11 (expr -> INTEGER .)
    MULT            reduce using rule 11 (expr -> INTEGER .)
    DIV             reduce using rule 11 (expr -> INTEGER .)
    MOD             reduce using rule 11 (expr -> INTEGER .)
    )               reduce using rule 11 (expr -> INTEGER .)


state 8

    (3) sentence -> expr ; .

    (               reduce using rule 3 (sentence -> expr ; .)
    INTEGER         reduce using rule 3 (sentence -> expr ; .)
    $end            reduce using rule 3 (sentence -> expr ; .)
    ;               reduce using rule 3 (sentence -> expr ; .)


state 9

    (6) expr -> expr SUMA . expr
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 16

state 10

    (7) expr -> expr RESTA . expr
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 17

state 11

    (8) expr -> expr MULT . expr
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 18

state 12

    (9) expr -> expr DIV . expr
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 19

state 13

    (10) expr -> expr MOD . expr
    (5) expr -> . ( expr )
    (6) expr -> . expr SUMA expr
    (7) expr -> . expr RESTA expr
    (8) expr -> . expr MULT expr
    (9) expr -> . expr DIV expr
    (10) expr -> . expr MOD expr
    (11) expr -> . INTEGER

    (               shift and go to state 6
    INTEGER         shift and go to state 7

    expr                           shift and go to state 20

state 14

    (4) sentence -> empty ; .

    (               reduce using rule 4 (sentence -> empty ; .)
    INTEGER         reduce using rule 4 (sentence -> empty ; .)
    $end            reduce using rule 4 (sentence -> empty ; .)
    ;               reduce using rule 4 (sentence -> empty ; .)


state 15

    (5) expr -> ( expr . )
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    )               shift and go to state 21
    SUMA            shift and go to state 9
    RESTA           shift and go to state 10
    MULT            shift and go to state 11
    DIV             shift and go to state 12
    MOD             shift and go to state 13


state 16

    (6) expr -> expr SUMA expr .
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               reduce using rule 6 (expr -> expr SUMA expr .)
    SUMA            reduce using rule 6 (expr -> expr SUMA expr .)
    RESTA           reduce using rule 6 (expr -> expr SUMA expr .)
    )               reduce using rule 6 (expr -> expr SUMA expr .)
    MULT            shift and go to state 11
    DIV             shift and go to state 12
    MOD             shift and go to state 13

  ! MULT            [ reduce using rule 6 (expr -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 6 (expr -> expr SUMA expr .) ]
  ! MOD             [ reduce using rule 6 (expr -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 9 ]
  ! RESTA           [ shift and go to state 10 ]


state 17

    (7) expr -> expr RESTA expr .
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               reduce using rule 7 (expr -> expr RESTA expr .)
    SUMA            reduce using rule 7 (expr -> expr RESTA expr .)
    RESTA           reduce using rule 7 (expr -> expr RESTA expr .)
    )               reduce using rule 7 (expr -> expr RESTA expr .)
    MULT            shift and go to state 11
    DIV             shift and go to state 12
    MOD             shift and go to state 13

  ! MULT            [ reduce using rule 7 (expr -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 7 (expr -> expr RESTA expr .) ]
  ! MOD             [ reduce using rule 7 (expr -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 9 ]
  ! RESTA           [ shift and go to state 10 ]


state 18

    (8) expr -> expr MULT expr .
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               reduce using rule 8 (expr -> expr MULT expr .)
    SUMA            reduce using rule 8 (expr -> expr MULT expr .)
    RESTA           reduce using rule 8 (expr -> expr MULT expr .)
    MULT            reduce using rule 8 (expr -> expr MULT expr .)
    DIV             reduce using rule 8 (expr -> expr MULT expr .)
    MOD             reduce using rule 8 (expr -> expr MULT expr .)
    )               reduce using rule 8 (expr -> expr MULT expr .)

  ! SUMA            [ shift and go to state 9 ]
  ! RESTA           [ shift and go to state 10 ]
  ! MULT            [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]
  ! MOD             [ shift and go to state 13 ]


state 19

    (9) expr -> expr DIV expr .
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               reduce using rule 9 (expr -> expr DIV expr .)
    SUMA            reduce using rule 9 (expr -> expr DIV expr .)
    RESTA           reduce using rule 9 (expr -> expr DIV expr .)
    MULT            reduce using rule 9 (expr -> expr DIV expr .)
    DIV             reduce using rule 9 (expr -> expr DIV expr .)
    MOD             reduce using rule 9 (expr -> expr DIV expr .)
    )               reduce using rule 9 (expr -> expr DIV expr .)

  ! SUMA            [ shift and go to state 9 ]
  ! RESTA           [ shift and go to state 10 ]
  ! MULT            [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]
  ! MOD             [ shift and go to state 13 ]


state 20

    (10) expr -> expr MOD expr .
    (6) expr -> expr . SUMA expr
    (7) expr -> expr . RESTA expr
    (8) expr -> expr . MULT expr
    (9) expr -> expr . DIV expr
    (10) expr -> expr . MOD expr

    ;               reduce using rule 10 (expr -> expr MOD expr .)
    SUMA            reduce using rule 10 (expr -> expr MOD expr .)
    RESTA           reduce using rule 10 (expr -> expr MOD expr .)
    MULT            reduce using rule 10 (expr -> expr MOD expr .)
    DIV             reduce using rule 10 (expr -> expr MOD expr .)
    MOD             reduce using rule 10 (expr -> expr MOD expr .)
    )               reduce using rule 10 (expr -> expr MOD expr .)

  ! SUMA            [ shift and go to state 9 ]
  ! RESTA           [ shift and go to state 10 ]
  ! MULT            [ shift and go to state 11 ]
  ! DIV             [ shift and go to state 12 ]
  ! MOD             [ shift and go to state 13 ]


state 21

    (5) expr -> ( expr ) .

    ;               reduce using rule 5 (expr -> ( expr ) .)
    SUMA            reduce using rule 5 (expr -> ( expr ) .)
    RESTA           reduce using rule 5 (expr -> ( expr ) .)
    MULT            reduce using rule 5 (expr -> ( expr ) .)
    DIV             reduce using rule 5 (expr -> ( expr ) .)
    MOD             reduce using rule 5 (expr -> ( expr ) .)
    )               reduce using rule 5 (expr -> ( expr ) .)

